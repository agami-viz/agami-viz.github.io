(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{223:function(t,e,r){var content=r(289);"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,r(59).default)("1b7833da",content,!0,{sourceMap:!1})},288:function(t,e,r){"use strict";var o=r(223);r.n(o).a},289:function(t,e,r){(e=r(58)(!1)).push([t.i,'.cursive{font-family:"Dancing Script",cursive}.image-filter{filter:grayscale(80%) saturate(8) drop-shadow(8px 8px 10px gray);transition:all .4s ease}.image-filter:hover{filter:none;transition:all .4s ease}.container{margin:0 auto;min-height:100vh}p{text-align:left;line-height:1.75rem;--text-opacity:1;color:#2d3748;color:rgba(45,55,72,var(--text-opacity))}ul{margin-left:2.5rem}pre{background-color:#e2e8f0;background-color:rgba(226,232,240,var(--bg-opacity));padding:1.25rem;text-align:left;white-space:pre-wrap}blockquote,pre{--bg-opacity:1;border-radius:.25rem;margin-top:1.25rem;margin-bottom:1.25rem}blockquote{background-color:#edf2f7;background-color:rgba(237,242,247,var(--bg-opacity));padding:.75rem}.title{font-family:"Quicksand","Source Sans Pro",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif;display:block;font-weight:300;font-size:64px;letter-spacing:1px}.subtitle{font-weight:300;font-size:42px;color:#526488;word-spacing:5px;padding-bottom:15px}.links{padding-top:15px}',""]),t.exports=e},290:function(t,e,r){"use strict";r.r(e);var o=r(232)(),n={data:function(){return{content:"# Marked in Node.js\n\n      \nRendered by **marked**.\n      "}},methods:{markdown:function(text){return text?o.render(text):""}}},l=(r(288),r(35)),component=Object(l.a)(n,(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",[r("div",{staticClass:"px-5 md:px-32 overflow-hidden pt-32 md:pt-16",staticStyle:{background:"#acb2c7"}},[r("div",{staticClass:"block text-center md:text-left md:flex justify-center items-center px-10 m-auto",staticStyle:{height:"700px"}},[r("div",{staticClass:"mr-10 lg:mr-0"},[r("h1",{staticClass:"pt-5 font-bold text-white cursive",staticStyle:{"font-weight":"bold","font-size":"6rem","margin-top":"-5rem"},attrs:{id:"title"}},[t._v("\n          Agami\n        ")]),t._v(" "),r("p",{staticClass:"text-gray-300 m-auto text-center md:text-left",staticStyle:{"max-width":"300px"}},[t._v("\n          Scalable Visual Analytics over Multidimensional Data Streams\n        ")])]),t._v(" "),r("img",{staticClass:"my-5 md:my-20 image-filter mx-auto md:mx-0",staticStyle:{width:"400px"},attrs:{src:"agami_landing.svg",alt:"Landing Vector"}})])]),t._v(" "),r("div",{staticClass:"text-center container"},[r("div",{staticClass:"m-auto px-10 pb-10",staticStyle:{"max-width":"700px"}},[r("div",[r("h3",{staticClass:"text-xl text-left mb-3 mt-8 font-bold uppercase text-gray-700",attrs:{id:"authors"}},[t._v("\n          Authors\n        ")]),t._v(" "),r("h4",{staticClass:"text-gray-600 mb-5 text-left"},[t._v("\n          Mingxin Lu, Edmund Wong, Daniel Barajas, Xiaochen Li, Mosopefoluwa Ogundipe, Nate Wilson,\n          Pragya Garg, Alark Joshi, and Matthew Malensek\n        ")])]),t._v(" "),r("div",[r("h3",{staticClass:"text-xl text-left mb-3 mt-8 font-bold uppercase text-gray-700",attrs:{id:"overview"}},[t._v("\n          Overview\n        ")]),t._v(" "),r("div",{staticClass:"m-auto p-5 bg-white rounded shadow mb-5",staticStyle:{"max-width":"800px"}},[r("img",{staticClass:"m-auto",attrs:{src:"overview-1.png",alt:"System Diagram"}})]),t._v(" "),r("p",[r("span",{staticClass:"ml-12"}),t._v("As worldwide capability to collect, store, and manage information continues to grow, the\n          resulting datasets become increasingly difficult to understand and extract insights from.\n          Interactive data visualizations offers a promising avenue to efficiently navigate and gain\n          insights from highly complex datasets, but the velocity of modern data streams often means\n          that precomputed representations or summarizations of the data will quickly become obsolete.\n          Our system, "),r("span",[t._v("Agami")]),t._v(", provides live-updating, interactive visualizations over\n          streaming data. We leverage in-memory data sketches to summarize and aggregate information\n          to be visualized, and also allow users to query future feature values by leveraging online\n          machine learning models. Our approach facilitates low-latency, iterative exploration of data\n          streams and can scale out incrementally to handle increasing stream velocities and query\n          loads. We provide a thorough evaluation of our data structures and system performance using\n          a real-world meteorological dataset.\n        ")])]),t._v(" "),r("div",[r("h3",{staticClass:"text-xl text-left mb-3 mt-8 font-bold uppercase text-gray-700",attrs:{id:"build"}},[t._v("\n          Build\n        ")]),t._v(" "),r("div",{staticClass:"text-left"},[t._v("\n          To run this program, there are multiple components:\n          "),r("ul",{staticClass:"list-disc"},[r("li",[t._v("AggregatorServer")]),t._v(" "),r("li",[t._v("AggregatorNode(s)")]),t._v(" "),r("li",[t._v("DataEmitter(s)")]),t._v(" "),r("li",[t._v("API_layer")])])]),t._v(" "),r("p",[t._v("\n          First, we need to install the correct libraries. We can do this with:\n        ")]),t._v(" "),r("pre",{staticClass:"bg-gray-300 rounded p-5 my-5"},[t._v("pip install -r requirements.txt")]),t._v(" "),r("blockquote",[t._v("This may be pip3 depending on your system.")]),t._v(" "),r("p",[t._v("\n          It is highly encouraged to use a virtual environment since there are many libraries in the requirements file.\n        ")]),t._v(" "),r("p",[t._v("\n          Then you can choose between manual build or automated local build for building.\n        ")]),t._v(" "),r("blockquote",[t._v("\n          Note this project is intended for Python 3.\n        ")])]),t._v(" "),r("div",[r("h3",{staticClass:"text-xl text-left mb-3 mt-8 font-bold uppercase text-gray-700",attrs:{id:"quickstart"}},[t._v("\n          Quickstart\n        ")]),t._v(" "),r("p",[t._v("\n          For convenience, a quick start bash script has been added. This contains all the same manual commands for local deployment in a one command.\n        ")]),t._v(" "),r("p",[t._v("\n          Just run bash run.sh to run all the components. Since all components run in a single command, all outputs cannot be displayed all at once. The AggregatorServer output is written to logs/server.log, the AggregatorNode output is written to logs/node{node_id}.log, the DataEmitter is written to logs/emitter.log, and the API_layer will be written out to logs/api.log\n        ")]),t._v(" "),r("p",[t._v("\n          The AggregatorServer and API_layer are given 3 seconds to start up properly. Afterwards, AggregatorNodes are given 3 seconds to start up properly as well. This accounts for most of the delay when running this script.\n        ")]),t._v(" "),r("p",[t._v("\n          It may be possible for outputs to be buffered. In this case, the output will not be written to the file immediately.\n        ")])]),t._v(" "),r("div",[r("h3",{staticClass:"text-xl text-left mb-3 mt-8 font-bold uppercase text-gray-700",attrs:{id:"manualbuild"}},[t._v("\n          Manual Build\n        ")]),t._v(" "),r("p",[t._v("\n          The manual build instructions includes general instructions on building each individual segment of the system.\n        ")]),t._v(" "),r("p",[t._v("\n          To start the Aggregator Server, run:\n        ")]),t._v(" "),r("pre",[t._v('python AggregatorServer.py\nUsage: AggregatorServer.py [OPTIONS]\n\nOptions:\n-h, --host TEXT: Set AggregatorServer host (default="")\n-p, --port INTEGER: Set AggregatorServer port (default=55555)\n--cli BOOLEAN: Enable or disable command line interface (default=True)\n--worker INTEGER: Specify number of threads to dispatch records (default=2) --help: Show this message and exit.\n        ')]),t._v(" "),r("pre",[t._v("Example: python AggregatorServer.py")]),t._v(" "),r("p",[t._v("\n          Each AggregatorNode will be assigned to a feature. As such, it is typical for multiple AggregatorNodes to be running at a time. Note that the AggregatorServer must be running first. To start a Aggregator Node, run:\n        ")]),t._v(" "),r("pre",[t._v("python AggregatorNode.py start <aggregatorserver_host> <aggregator_node_port>\n\naggregatorserver_host: the host of the AggregatorServer\naggregator_node_port: the port of the AggregatorNode")]),t._v(" "),r("p",[t._v("\n          You can specify the host of aggregator node by\n        ")]),t._v(" "),r("pre",[t._v("Example on localhost: python AggregatorNode.py start localhost 55556 --host localhost")]),t._v(" "),r("p",[t._v("\n          Each node should have a different port number.\n        ")]),t._v(" "),r("p",[t._v("\n          Now we can simulate live data with the DataEmitter. This will send data to the AggregatorServer.\n        ")]),t._v(" "),r("pre",[t._v("python DataEmitter.py serial <data path> <aggregator server host>\n\ndata path: the path to the data file (sample is in data/2018/CRNS0101-05-2018-KS_Manhattan_6_SSW.txt)\naggregator server host: host to the AggregatorServer in host:port format")]),t._v(" "),r("pre",[t._v("Example: python DataEmitter.py serial data/2018/CRNS0101-05-2018-KS_Manhattan_6_SSW.txt localhost:55555 -i 0")]),t._v(" "),r("p",[t._v("\n          Finally, start the API_layer by:\n        ")]),t._v(" "),r("pre",[t._v("python API_layer.py <aggregator server host> <port>\n\naggregator server host: the host of the AggregatorServer\nport: the port to connect to the AggregatorServer")]),t._v(" "),r("pre",[t._v("Example: python API_layer.py localhost 2222")]),t._v(" "),r("p",[t._v("\n          Head to http://localhost:5000 to view the updating visualizations as data streams in.\n        ")])])])])])}],!1,null,null,null);e.default=component.exports}}]);